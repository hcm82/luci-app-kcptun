#!/bin/sh /etc/rc.common
#
# Copyright 2016-2017 Xingwang Liao <kuoruan@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

START=99
STOP=15
USE_PROCD=1

KCPTUN=kcptun
INIT_SCRIPT=/etc/init.d/$KCPTUN
CONFIG_FOLDER=/var/etc/$KCPTUN
DEFAULT_USER=root

if [ -r /usr/lib/kcptun/functions.sh ]; then
	. /usr/lib/kcptun/functions.sh
else
	logger -p daemon.err -t "$KCPTUN" \
		"Could not find '/usr/lib/kcptun/functions.sh', please reinstall LuCI."
	exit 1
fi

_cron_restart() {
	/etc/init.d/cron restart  >/dev/null 2>&1
}

_add_cron_script() {
	(crontab -l 2>/dev/null; echo "$1") | sort | uniq | crontab -
}

_rm_cron_script() {
	crontab -l 2>/dev/null | grep -vF "$1" | sort | uniq | crontab -
}

gen_client_config_file() {
	local section_id="$1"

	local config_file=${CONFIG_FOLDER}/client.${section_id}.json

	[ -z "$server_addr" ] || [ -z "$server_port" ] || [ -z "$listen_port" ] && return 1

	is_ipv6_address() {
		echo "$1" | grep -q ":"
	}

	is_ipv6_address "$server_addr" && server_addr="[${server_addr}]"
	is_ipv6_address "$listen_addr" && listen_addr="[${listen_addr}]"

	add_iptables_rule "$listen_port" "client"

	json_init
	json_add_string "remoteaddr" "${server_addr}:${server_port}"
	json_add_string "localaddr" "${listen_addr}:${listen_port}"

	add_configs() {
		local type="$1"; shift
		local k v

		for k in "$@"; do
			v="$(eval echo "\$$k")"

			if [ -n "$v" ]; then
				if [ "$type" = "string" ]; then
					json_add_string "$k" "$v"
				elif [ "$type" = "int" ]; then
					json_add_int "$k" "$v"
				elif [ "$type" = "boolean" ]; then
					json_add_boolean "$k" "$v"
				fi
			fi
		done
	}

	add_configs "string" key crypt mode
	add_configs "int" conn autoexpire mtu sndwnd rcvwnd datashard parityshard dscp \
		nodelay interval resend nc sockbuf keepalive scavengettl snmpperiod
	add_configs "boolean" nocomp acknodelay

	if is_enable_logging; then
		json_add_string "log" "${log_folder}/client.log"
	fi

	json_close_object

	if json_dump -i >"$config_file"; then
		echo "$config_file"
	fi
}

setup_iptables_chain() {
	if ! ( iptables -nL "$KCPTUN" >/dev/null 2>&1 ); then
		_log "Creating new firewall chain ${KCPTUN}..."
		iptables -N "$KCPTUN" 2>/dev/null
	fi

	iptables -C OUTPUT -j "$KCPTUN" 2>/dev/null || \
		iptables -A OUTPUT -j "$KCPTUN" 2>/dev/null
	iptables -C INPUT -j "$KCPTUN" 2>/dev/null || \
		iptables -A INPUT -j "$KCPTUN" 2>/dev/null
}

clear_iptables_chain() {
	_log "Deleting all firewall rules in chain ${KCPTUN}..."
	iptables -F "$KCPTUN" >/dev/null 2>&1
}

add_iptables_rule() {
	local port="$1"
	local type="$2"

	if [ "$type" = "client" ]; then
		( iptables -C "$KCPTUN" -p tcp --dport "$port" -m comment \
			--comment "$type" -j ACCEPT 2>/dev/null ) && return 0

		_log "Add firewall rules for ${type}, port ${port}."
		iptables -A "$KCPTUN" -p tcp --dport "$port" -m comment \
			--comment "$type" -j ACCEPT 2>/dev/null
	elif [ "$type" = "server" ]; then
		( iptables -C "$KCPTUN" -p udp --dport "$port" -m comment \
			--comment "$type" -j ACCEPT 2>/dev/null ) && return 0

		_log "Add firewall rules for ${type}, port ${port}."
		iptables -A "$KCPTUN" -p udp --dport "$port" -m comment \
			--comment "$type" -j ACCEPT 2>/dev/null
	fi
}

rm_cron_task() {
	local action="$1"
	local restart="$2"

	local entry="${INIT_SCRIPT} ${action}"

	if ( crontab -l 2>/dev/null | grep -qF "$entry" ); then
		_log "Removing existing cron ${action} task..."
		_rm_cron_script "$entry"

		[ "$restart" = "1" ] && _cron_restart
	fi
}

add_cron_task() {
	local cron_time="$1"
	local action="$2"
	local restart="$3"

	local entry="${cron_time} ${INIT_SCRIPT} ${action}"
	if ! ( crontab -l 2>/dev/null | grep -qF "$entry" ); then
		rm_cron_task "$action" "0"

		_log "Adding new cron ${action} task..."
		_add_cron_script "$entry"
		[ "$restart" = "1" ] && _cron_restart
	fi
}

clear_all() {
	rm_cron_task "restart" "1"
	clear_iptables_chain
}

setup_cron_restart_task() {
	if [ -n "$auto_restart" ]; then
		local h m

		h=$(echo "${auto_restart}" | cut -d':' -f1)
		m=$(echo "${auto_restart}" | cut -d':' -f2)

		if [ -n "$h" ] && [ -n "$m" ]; then
			add_cron_task "${m} ${h} * * *" "restart" "1"
			_log "Service will restart at ${auto_restart} every day."
		else
			rm_cron_task "restart" "1"
		fi
	else
		rm_cron_task "restart" "1"
	fi
}

validate_server_section() {
	uci_validate_section "$KCPTUN" servers "$1" \
		'server_addr:host' \
		'server_port:port' \
		'listen_addr:host' \
		'listen_port:port' \
		'key:string' \
		'crypt:string' \
		'mode:or("normal","fast","fast2","fast3","manual")' \
		'conn:min(1)' \
		'autoexpire:uinteger' \
		'scavengettl:min(-1)' \
		'mtu:range(64,9200)' \
		'sndwnd:min(1)' \
		'rcvwnd:min(1)' \
		'datashard:uinteger' \
		'parityshard:uinteger' \
		'dscp:uinteger' \
		'nocomp:bool' \
		'nodelay:bool' \
		'interval:uinteger' \
		'resend:range(0,2)' \
		'nc:bool' \
		'acknodelay:bool' \
		'sockbuf:uinteger' \
		'keepalive:uinteger' \
		'snmpperiod:min(1)'
}

service_triggers() {
	procd_add_reload_trigger "$KCPTUN"
}

start_service() {
	kcptun_server=$(uci_get_by_type_option "general" "server")
	client_file=$(uci_get_by_type_option "general" "client_file")
	daemon_user=$(uci_get_by_type_option "general" "daemon_user" "$DEFAULT_USER")
	auto_restart=$(uci_get_by_type_option "general" "auto_restart")

	if [ -z "$kcptun_server" ] || [ "$kcptun_server" = "nil" ]; then
		 _log "No server selected, Client will stop."
		 clear_all
		 return 0
	elif ! validate_server_section "$kcptun_server"; then
		_err "Server config validation failed."
		clear_all
		return 1
	fi

	if [ -z "$client_file" ]; then
		_err "Please set client file path."
		clear_all
		return 1;
	elif ! validate_client_file "$client_file"; then
		_err "Client file validation failed."
		clear_all
		return 1
	fi

	setup_cron_restart_task
	setup_iptables_chain

	if is_enable_logging; then
		mkdir -p "$CONFIG_FOLDER" "$log_folder"
		chown -R "$daemon_user" "$log_folder"
	fi

	client_config_file="$(gen_client_config_file "$kcptun_server")"

	if [ "$?" = "0" ] && [ -r "$client_config_file" ]; then
		procd_open_instance
		procd_set_param command "$client_file"
		procd_append_param command -c "$client_config_file"
		procd_set_param respawn
		procd_set_param user "$daemon_user"
		procd_set_param file "$client_config_file"
		procd_close_instance

		_log "Service started."
	else
		_err "Gen client config file failed."
		clear_all
		return 1
	fi
}

stop_service() {
	_log "Service stoped."
}

reload_service() {
	_log "Reload begin..."
	stop
	start
}

restart() {
	_log "Restart begin..."
	stop
	start
}

boot() {
	ubus -t 30 wait_for network.interface 2>/dev/null
	rc_procd start_service
}
